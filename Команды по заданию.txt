python manage.py shell
from news.models import *

1 Создать двух пользователей (с помощью метода User.objects.create_user('username')).

user1 = User.objects.create_user('Пупа')
user2 = User.objects.create_user('Лупа')

2 Создать два объекта модели Author, связанные с пользователями.

Author.objects.create(user=user1)
Author.objects.create(user=user2)

3 Добавить 4 категории в модель Category.

Category.objects.create(name_category = 'Спорт')
Category.objects.create(name_category = 'Юмор')
Category.objects.create(name_category = 'Отдых')
Category.objects.create(name_category = 'Здоровье')

4 Добавить 2 статьи и 1 новость.

post = Author.objects.get(pk=1)
Post.objects.create(author=post, type='02', article_text='Конь поскакал на всаднике', head_name='Шок-контент')

post1 = Author.objects.get(pk=2)
Post.objects.create(author=post, type='01', article_text='Крепкое ли здоровье у скакунов', head_name='Как у коня!')

post = Author.objects.get(pk=1)
Post.objects.create(author=post, type='01', article_text='Сколько редисок нужно есть для здорового сна', head_name='Редис')

5 Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).

post = Post.objects.get(pk=1)
category = Category.objects.get(pk=1)
post.category.add(category)

post = Post.objects.get(pk=2)
category = Category.objects.get(pk=4)
post.category.add(category)

post1 = Post.objects.get(pk=1)
post2 = Post.objects.get(pk=2)
post3 = Post.objects.get(pk=3)


category1 = Category.objects.get(pk=1)
category2 = Category.objects.get(pk=2)


post1.category.add(category1)
post1.category.add(category2)


post2.category.add(category1)
post2.category.add(category2)


post3.category.add(category1)
post3.category.add(category2)

6 Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).

com1 = Comment.objects.create(user_id=1, post_id=1, comment_text='Комент к спорту')
com2 = Comment.objects.create(user_id=2, post_id=2, comment_text='Комент к юмору')
com3 = Comment.objects.create(user_id=2, post_id=3, comment_text='Комент к отдыху')
com4 = Comment.objects.create(user_id=1, post_id=2, comment_text='Комент к здоровью')

7 Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

Post.objects.get(pk=1).like()
Post.objects.get(pk=2).like()
Post.objects.get(pk=3).like()
Post.objects.get(pk=1).dislike()
Post.objects.get(pk=1).dislike()
Post.objects.get(pk=1).dislike()
Post.objects.get(pk=3).dislike()

8 Обновить рейтинги пользователей.

auth_rating = Author.objects.get(pk=1)
auth_rating.update_rating()

auth_rating = Author.objects.get(pk=2)
auth_rating.update_rating()

9 Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).

Author.objects.order_by('rate')

10 Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.

Post.objects.order_by('rate').values('author__user__username')

11 Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

best = Post.objects.order_by('-rate').first()
best
comments = Comment.objects.all().filter(post_id=best.id)
comments

for comment in comments:
    print(comment.time_in)
    print(User.objects.get(id=comment.user_id))
    print(comment.rate)
    print(comment.comment_text)